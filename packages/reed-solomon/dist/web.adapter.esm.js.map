{"version":3,"file":"web.adapter.esm.js","sources":["../src/web.adapter.js"],"sourcesContent":["import { ReedSolomon } from '.';\nimport { splitPrice } from './utils';\n\nexport class WebAdapterReedSolomon extends ReedSolomon {\n  initWorkers({ injectWorker, workerNum = 10 }) {\n    this.workerNum = workerNum;\n    this.workers = [];\n    for (let i = 0; i < workerNum; i++) {\n      const worker = createWorker(injectWorker);\n      this.workers.push(worker);\n    }\n  }\n\n  async encodeInWorker(sourceData) {\n    if (!this.workerNum || !this.workers)\n      throw new Error('`initWorkers` must be executed first to ensure the number of workers');\n\n    // RES is `encodeShards` Array\n    let RES = [];\n    const chunkList = splitPrice(sourceData, this.segmentSize);\n    const queue = [];\n\n    for (let i = 0; i < chunkList.length; i++) {\n      queue.push({\n        index: i,\n        chunk: chunkList[i],\n      });\n    }\n\n    return new Promise((resolve) => {\n      let completedWorkers = 0;\n\n      for (let i = 0; i < queue.length; i++) {\n        const worker = this.workers[i % this.workerNum];\n        worker.postMessage({\n          index: queue[i].index,\n          chunk: queue[i].chunk,\n        });\n\n        worker.onmessage = (e) => {\n          // console.log('worker data', e.data)\n          completedWorkers++;\n          RES.push(e.data);\n\n          if (completedWorkers === queue.length) {\n            // console.log('RES', RES)\n            const sortedRes = this.sortByIndex(RES);\n            resolve(this.getChecksumsByEncodeShards(sortedRes));\n          }\n        };\n      }\n    });\n  }\n}\n\nfunction createWorker(f) {\n  var blob = new Blob(['(' + f.toString() + ')()']);\n  var url = window.URL.createObjectURL(blob);\n  var worker = new Worker(url);\n  return worker;\n}\n"],"names":["WebAdapterReedSolomon","ReedSolomon","initWorkers","injectWorker","workerNum","this","workers","i","worker","createWorker","push","encodeInWorker","sourceData","Error","RES","chunkList","splitPrice","segmentSize","queue","length","index","chunk","Promise","resolve","completedWorkers","postMessage","onmessage","e","data","sortedRes","sortByIndex","getChecksumsByEncodeShards","f","blob","Blob","toString","url","window","URL","createObjectURL","Worker"],"mappings":"6EAGO,MAAMA,UAA8BC,EACzC,WAAAC,EAAYC,aAAEA,EAAYC,UAAEA,EAAY,KACtCC,KAAKD,UAAYA,EACjBC,KAAKC,QAAU,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAWG,IAAK,CAClC,MAAMC,EAASC,EAAaN,GAC5BE,KAAKC,QAAQI,KAAKF,EACnB,CACF,CAED,oBAAMG,CAAeC,GACnB,IAAKP,KAAKD,YAAcC,KAAKC,QAC3B,MAAM,IAAIO,MAAM,wEAGlB,IAAIC,EAAM,GACV,MAAMC,EAAYC,EAAWJ,EAAYP,KAAKY,aACxCC,EAAQ,GAEd,IAAK,IAAIX,EAAI,EAAGA,EAAIQ,EAAUI,OAAQZ,IACpCW,EAAMR,KAAK,CACTU,MAAOb,EACPc,MAAON,EAAUR,KAIrB,OAAO,IAAIe,SAASC,IAClB,IAAIC,EAAmB,EAEvB,IAAK,IAAIjB,EAAI,EAAGA,EAAIW,EAAMC,OAAQZ,IAAK,CACrC,MAAMC,EAASH,KAAKC,QAAQC,EAAIF,KAAKD,WACrCI,EAAOiB,YAAY,CACjBL,MAAOF,EAAMX,GAAGa,MAChBC,MAAOH,EAAMX,GAAGc,QAGlBb,EAAOkB,UAAaC,IAKlB,GAHAH,IACAV,EAAIJ,KAAKiB,EAAEC,MAEPJ,IAAqBN,EAAMC,OAAQ,CAErC,MAAMU,EAAYxB,KAAKyB,YAAYhB,GACnCS,EAAQlB,KAAK0B,2BAA2BF,GACzC,EAEJ,IAEJ,EAGH,SAASpB,EAAauB,GACpB,IAAIC,EAAO,IAAIC,KAAK,CAAC,IAAMF,EAAEG,WAAa,QACtCC,EAAMC,OAAOC,IAAIC,gBAAgBN,GAErC,OADa,IAAIO,OAAOJ,EAE1B"}